
glcd_library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000403  00800060  00800060  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d34  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065e  00000000  00000000  00001929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000845  00000000  00000000  000025c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	24 e0       	ldi	r18, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  74:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <glcd_enable_controller>:
	glcd_enable_controller(0);
 }

 void glcd_enable_controller(uint8_t controller_nr)
 {
	 if(controller_nr)
  7c:	88 23       	and	r24, r24
  7e:	31 f0       	breq	.+12     	; 0x8c <glcd_enable_controller+0x10>
	 {
		enabled_controller = 1;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <enabled_controller>
		controller_port &= ~CS2;
  86:	da 98       	cbi	0x1b, 2	; 27
		controller_port |= CS1;
  88:	db 9a       	sbi	0x1b, 3	; 27
  8a:	08 95       	ret
	 }
	 else
	 {
		enabled_controller = 0;
  8c:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <enabled_controller>
		controller_port &= ~CS1;
  90:	db 98       	cbi	0x1b, 3	; 27
		controller_port |= CS2;
  92:	da 9a       	sbi	0x1b, 2	; 27
  94:	08 95       	ret

00000096 <glcd_command>:
	 }
 }

 void glcd_command(uint8_t command)
 {
	data_ddr = DATA_WRITE;
  96:	9f ef       	ldi	r25, 0xFF	; 255
  98:	94 bb       	out	0x14, r25	; 20

	controller_port |= E;
  9a:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	9a e1       	ldi	r25, 0x1A	; 26
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <glcd_command+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <glcd_command+0xe>
	_delay_us(E_RISE_TIME);

	data_port = command;
  a4:	85 bb       	out	0x15, r24	; 21

	controller_port &= ~E;
  a6:	d8 98       	cbi	0x1b, 0	; 27
  a8:	85 e3       	ldi	r24, 0x35	; 53
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <glcd_command+0x14>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <glcd_enable_mirroring_controllers>:
	glcd_clear_screen_data();
 }

 void glcd_enable_mirroring_controllers()
 {
	controller_port &= ~(CS2 | CS1);
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	83 7f       	andi	r24, 0xF3	; 243
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret

000000ba <glcd_write_data>:
 }

 void glcd_write_data(uint8_t byte)
 {
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	controller_port |= RS;
  be:	d9 9a       	sbi	0x1b, 1	; 27

	glcd_command(byte);
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>

	screen_data[glcd_y + enabled_controller*SINGLE_CONTROLLER_SCREEN_WIDTH][glcd_x] = byte;
  c4:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <glcd_y>
  c8:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <enabled_controller>
  cc:	90 e4       	ldi	r25, 0x40	; 64
  ce:	e9 9f       	mul	r30, r25
  d0:	f0 01       	movw	r30, r0
  d2:	11 24       	eor	r1, r1
  d4:	e8 0f       	add	r30, r24
  d6:	f1 1d       	adc	r31, r1
  d8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ef 59       	subi	r30, 0x9F	; 159
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	e9 0f       	add	r30, r25
  ee:	f1 1d       	adc	r31, r1
  f0:	c0 83       	st	Z, r28

	glcd_y++;
	glcd_y %= SINGLE_CONTROLLER_SCREEN_WIDTH;
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	8f 73       	andi	r24, 0x3F	; 63
  f6:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <glcd_y>

	controller_port &= ~RS;
  fa:	d9 98       	cbi	0x1b, 1	; 27
 }
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <glcd_clear>:
	controller_port &= ~E;
	_delay_us(E_FALL_TIME + DATA_WRITE_TIME);
 }

 void glcd_clear()
 {
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
	 glcd_command(SET_Y(0));
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <glcd_y>
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
 110:	10 e0       	ldi	r17, 0x00	; 0

	 for (int i=0; i<SCREEN_HEIGHT/BITS_IN_BYTE; i++)
	 {
		 glcd_command(SET_X(i));
 112:	81 2f       	mov	r24, r17
 114:	88 6b       	ori	r24, 0xB8	; 184
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
 11e:	c0 e4       	ldi	r28, 0x40	; 64
 120:	d0 e0       	ldi	r29, 0x00	; 0
		 for (int j=0; j<SINGLE_CONTROLLER_SCREEN_WIDTH; j++)
		 {
			glcd_write_data(0);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 5d 00 	call	0xba	; 0xba <glcd_write_data>
 128:	21 97       	sbiw	r28, 0x01	; 1
	 glcd_command(SET_Y(0));

	 for (int i=0; i<SCREEN_HEIGHT/BITS_IN_BYTE; i++)
	 {
		 glcd_command(SET_X(i));
		 for (int j=0; j<SINGLE_CONTROLLER_SCREEN_WIDTH; j++)
 12a:	d9 f7       	brne	.-10     	; 0x122 <glcd_clear+0x22>
 12c:	1f 5f       	subi	r17, 0xFF	; 255

 void glcd_clear()
 {
	 glcd_command(SET_Y(0));

	 for (int i=0; i<SCREEN_HEIGHT/BITS_IN_BYTE; i++)
 12e:	18 30       	cpi	r17, 0x08	; 8
 130:	81 f7       	brne	.-32     	; 0x112 <glcd_clear+0x12>
		 {
			glcd_write_data(0);
		 }
	 }

	 glcd_command(SET_X(0));
 132:	88 eb       	ldi	r24, 0xB8	; 184
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 138:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
 }
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	08 95       	ret

00000144 <glcd_init>:
uint8_t enabled_controller;
uint8_t screen_data[SCREEN_WIDTH][SCREEN_HEIGHT/BITS_IN_BYTE];

 void glcd_init()
 {
	data_ddr = DATA_WRITE;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	84 bb       	out	0x14, r24	; 20
	controller_ddr |= E | RS | CS2 | CS1;
 148:	8a b3       	in	r24, 0x1a	; 26
 14a:	8f 60       	ori	r24, 0x0F	; 15
 14c:	8a bb       	out	0x1a, r24	; 26

	uint8_t screen_count = SCREEN_WIDTH/SINGLE_CONTROLLER_SCREEN_WIDTH;

	glcd_enable_mirroring_controllers();
 14e:	0e 94 59 00 	call	0xb2	; 0xb2 <glcd_enable_mirroring_controllers>
	glcd_command(DISPLAY_ON);
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
	glcd_command(DISPLAY_LINE_START(0));
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
	glcd_clear();
 15e:	0e 94 80 00 	call	0x100	; 0x100 <glcd_clear>
	glcd_enable_controller(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <glcd_enable_controller>
 168:	08 95       	ret

0000016a <glcd_clear_screen_data>:
		}
	}
}

void glcd_clear_screen_data()
{
 16a:	e1 e6       	ldi	r30, 0x61	; 97
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	21 e6       	ldi	r18, 0x61	; 97
 170:	34 e0       	ldi	r19, 0x04	; 4
 172:	08 c0       	rjmp	.+16     	; 0x184 <glcd_clear_screen_data+0x1a>
	for (uint8_t i=0; i<SCREEN_WIDTH; i++)
	{
		for(uint8_t j = 0; j<SCREEN_HEIGHT/BITS_IN_BYTE; j++)
		{
			screen_data[i][j] = 0;
 174:	11 92       	st	Z+, r1

void glcd_clear_screen_data()
{
	for (uint8_t i=0; i<SCREEN_WIDTH; i++)
	{
		for(uint8_t j = 0; j<SCREEN_HEIGHT/BITS_IN_BYTE; j++)
 176:	e8 17       	cp	r30, r24
 178:	f9 07       	cpc	r31, r25
 17a:	e1 f7       	brne	.-8      	; 0x174 <glcd_clear_screen_data+0xa>
 17c:	fc 01       	movw	r30, r24
	}
}

void glcd_clear_screen_data()
{
	for (uint8_t i=0; i<SCREEN_WIDTH; i++)
 17e:	28 17       	cp	r18, r24
 180:	39 07       	cpc	r19, r25
 182:	19 f0       	breq	.+6      	; 0x18a <glcd_clear_screen_data+0x20>
 184:	cf 01       	movw	r24, r30
 186:	08 96       	adiw	r24, 0x08	; 8
 188:	f5 cf       	rjmp	.-22     	; 0x174 <glcd_clear_screen_data+0xa>
 18a:	08 95       	ret

0000018c <glcd_clear_all>:
	 glcd_command(SET_X(0));
 }

 void glcd_clear_all()
 {
	glcd_enable_mirroring_controllers();
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <glcd_enable_mirroring_controllers>
	glcd_clear();
 190:	0e 94 80 00 	call	0x100	; 0x100 <glcd_clear>
	glcd_enable_controller(0);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 3e 00 	call	0x7c	; 0x7c <glcd_enable_controller>
	glcd_clear_screen_data();
 19a:	0e 94 b5 00 	call	0x16a	; 0x16a <glcd_clear_screen_data>
 19e:	08 95       	ret

000001a0 <glcd_set_y>:
//////////////////////////////////////////////////////////////////////////
////////COMMANDS
//////////////////////////////////////////////////////////////////////////

void glcd_set_y(uint8_t y)
{
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
	glcd_command(SET_Y(y));
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <glcd_y>
 1aa:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
	glcd_y = y;
 1ae:	c0 93 61 04 	sts	0x0461, r28	; 0x800461 <glcd_y>
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <glcd_set_x>:

void glcd_set_x(uint8_t x)
{
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
	glcd_command(SET_X(x));
 1ba:	88 6b       	ori	r24, 0xB8	; 184
 1bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1c0:	0e 94 4b 00 	call	0x96	; 0x96 <glcd_command>
	glcd_x = x;
 1c4:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <_edata>
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <glcd_set_cursor>:

	controller_port &= ~RS;
 }

 void glcd_set_cursor(uint8_t x, uint8_t y)
 {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	c8 2f       	mov	r28, r24
 1d2:	d6 2f       	mov	r29, r22
	uint8_t row = y/BITS_IN_BYTE;
	uint8_t column = x % SINGLE_CONTROLLER_SCREEN_WIDTH;
	uint8_t controller = x/SINGLE_CONTROLLER_SCREEN_WIDTH;

	glcd_enable_controller(controller);
 1d4:	82 95       	swap	r24
 1d6:	86 95       	lsr	r24
 1d8:	86 95       	lsr	r24
 1da:	83 70       	andi	r24, 0x03	; 3
 1dc:	0e 94 3e 00 	call	0x7c	; 0x7c <glcd_enable_controller>
	glcd_set_x(row);
 1e0:	8d 2f       	mov	r24, r29
 1e2:	86 95       	lsr	r24
 1e4:	86 95       	lsr	r24
 1e6:	86 95       	lsr	r24
 1e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <glcd_set_x>
	glcd_set_y(column);
 1ec:	8c 2f       	mov	r24, r28
 1ee:	8f 73       	andi	r24, 0x3F	; 63
 1f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <glcd_set_y>
 }
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <glcd_set_pixel>:

 void glcd_set_pixel(uint8_t x, uint8_t y)
 {
 1fa:	cf 93       	push	r28
 1fc:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 1fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y + enabled_controller*SINGLE_CONTROLLER_SCREEN_WIDTH][glcd_x]  | 1 << pixel;
 202:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <enabled_controller>
 206:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <glcd_y>
 20a:	90 e4       	ldi	r25, 0x40	; 64
 20c:	e9 9f       	mul	r30, r25
 20e:	f0 01       	movw	r30, r0
 210:	11 24       	eor	r1, r1
 212:	e8 0f       	add	r30, r24
 214:	f1 1d       	adc	r31, r1
 216:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ef 59       	subi	r30, 0x9F	; 159
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	e8 0f       	add	r30, r24
 22c:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 22e:	c7 70       	andi	r28, 0x07	; 7
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <glcd_set_pixel+0x40>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	ca 95       	dec	r28
 23c:	e2 f7       	brpl	.-8      	; 0x236 <glcd_set_pixel+0x3c>
 23e:	90 81       	ld	r25, Z
 240:	89 2b       	or	r24, r25
 242:	0e 94 5d 00 	call	0xba	; 0xba <glcd_write_data>
 }
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <glcd_test_mixed>:

void glcd_test_mixed()
{
	uint8_t x = 0;
	uint8_t y = 0;
	uint8_t horizontal = 0;
 24a:	10 e0       	ldi	r17, 0x00	; 0
}

void glcd_test_mixed()
{
	uint8_t x = 0;
	uint8_t y = 0;
 24c:	d0 e0       	ldi	r29, 0x00	; 0
	glcd_test_mixed();
}

void glcd_test_mixed()
{
	uint8_t x = 0;
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	01 e0       	ldi	r16, 0x01	; 1
 252:	f1 2c       	mov	r15, r1
	uint8_t y = 0;
	uint8_t horizontal = 0;

	while (1)
	{
		glcd_set_pixel(x,y);
 254:	6d 2f       	mov	r22, r29
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 fd 00 	call	0x1fa	; 0x1fa <glcd_set_pixel>

		if(horizontal)
 25c:	11 23       	and	r17, r17
 25e:	59 f0       	breq	.+22     	; 0x276 <glcd_test_mixed+0x2c>
		{
			x++;
 260:	cf 5f       	subi	r28, 0xFF	; 255
			
			if(x >= SCREEN_WIDTH)
 262:	a2 f4       	brpl	.+40     	; 0x28c <glcd_test_mixed+0x42>
			{
				x = SINGLE_CONTROLLER_SCREEN_WIDTH;
				y++;
 264:	df 5f       	subi	r29, 0xFF	; 255

				if(y >= SCREEN_HEIGHT)
 266:	d0 34       	cpi	r29, 0x40	; 64
 268:	80 f0       	brcs	.+32     	; 0x28a <glcd_test_mixed+0x40>
				{
					x = 0;
					y = 0;
					horizontal = 0;
					glcd_clear_all();
 26a:	0e 94 c6 00 	call	0x18c	; 0x18c <glcd_clear_all>

				if(y >= SCREEN_HEIGHT)
				{
					x = 0;
					y = 0;
					horizontal = 0;
 26e:	1f 2d       	mov	r17, r15
				y++;

				if(y >= SCREEN_HEIGHT)
				{
					x = 0;
					y = 0;
 270:	d0 e0       	ldi	r29, 0x00	; 0
				x = SINGLE_CONTROLLER_SCREEN_WIDTH;
				y++;

				if(y >= SCREEN_HEIGHT)
				{
					x = 0;
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	0b c0       	rjmp	.+22     	; 0x28c <glcd_test_mixed+0x42>
				}
			}
		}
		else
		{
			y++;
 276:	df 5f       	subi	r29, 0xFF	; 255
			
			if(y >= SCREEN_HEIGHT)
 278:	d0 34       	cpi	r29, 0x40	; 64
 27a:	40 f0       	brcs	.+16     	; 0x28c <glcd_test_mixed+0x42>
			{
				x++;
 27c:	cf 5f       	subi	r28, 0xFF	; 255
 27e:	10 2f       	mov	r17, r16
 280:	c0 34       	cpi	r28, 0x40	; 64
 282:	08 f4       	brcc	.+2      	; 0x286 <glcd_test_mixed+0x3c>
 284:	1f 2d       	mov	r17, r15
				y = 0;
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	01 c0       	rjmp	.+2      	; 0x28c <glcd_test_mixed+0x42>
		{
			x++;
			
			if(x >= SCREEN_WIDTH)
			{
				x = SINGLE_CONTROLLER_SCREEN_WIDTH;
 28a:	c0 e4       	ldi	r28, 0x40	; 64
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	9f e1       	ldi	r25, 0x1F	; 31
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <glcd_test_mixed+0x46>
 294:	00 c0       	rjmp	.+0      	; 0x296 <glcd_test_mixed+0x4c>
 296:	00 00       	nop
 298:	dd cf       	rjmp	.-70     	; 0x254 <glcd_test_mixed+0xa>

0000029a <main>:
void glcd_test_mixed();


int main(void)
{
	glcd_init();
 29a:	0e 94 a2 00 	call	0x144	; 0x144 <glcd_init>

	glcd_test_mixed();
 29e:	0e 94 25 01 	call	0x24a	; 0x24a <glcd_test_mixed>

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
